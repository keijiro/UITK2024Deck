これがそのサンプルで、Strawman という名前のシーンです。
Dance、Spin、Flip の３つのボタンが配置されています。<br>ボタンを押すと、それぞれに対応したアニメーションが再生されます。
さて、それでは少し時間を遡って、UI の実装を行う前の状態に戻します。
UI 以外の基本的なセットアップは既に完了しています。<br>今から、ここに UI を追加する作業を行っていきましょう。
まず Create メニューから UI Document を作成します。<br>名前は Strawman にしておきましょうか。
これが UI のデザインを保存するファイルになります。
また同時に、Panel Settings というファイルも作ります。<br>これは UI の表示設定を保存するファイルになります。
中身については、今回は詳しく触れません。<br>基本的にはデフォルト設定のまま使えば OK です。
次に、この Strawman ゲームオブジェクトに UI Document コンポーネントを追加します。
そして、先ほど作成した Panel Settings と UI Document アセットを設定します。
これでシーン側の基本セットアップは完了です。
次に、この UI Document 上に UI をデザインしていくことになります。
とりあえずダブルクリックして開きましょう。<br>すると UI Builder ウィンドウが立ち上がります。
これは UI Toolkit で UI をデザインするための専用のツールです。<br>早速このツールを使ってボタンを配置してみましょう。
この Library の中に各種の UI コントロールが用意されています。<br>ここからドラッグ&ドロップで Button を３つ配置しましょう。
これらのボタンの設定は、こちらの Inspector の中で変更できます。
この Text アトリビュートでボタンのラベルを変更できます。<br>それぞれ "Dance"、"Spin"、"Flip" に変更しましょう。
さて、このボタンをスクリプトから参照するには ID を設定しておく必要があります。
それぞれ "button-dance"、"button-spin"、"button-flip" に変更しましょう。
ボタンのレイアウトが不恰好なのがちょっと気になりますが、まあこれは後で調整しましょう。
先にアニメーションを起動するためのスクリプトを書くことにします。
スクリプトの内容はこんな感じです。<br>ざっと簡単に説明しますね。
まず最初に UI のルートエレメントを取得しています。<br>そしてアニメーションを起動するための Animator を取得しています。
次に続く３行は、ボタンにアクションを割り当てる処理です。
UIDocument から特定のエレメントを検索するには、Q という拡張メソッドを使うことができます。
これは本当は、Query、Build、First という複数のメソッド呼び出しを必要とする処理なのですが、非常に多用することになるので、省略して Q と書けるようになっています。
ここでは、先ほど設定した名前を使ってボタンのエレメントを３つ検索しています。
そして、それぞれ取得したエレメントの clicked イベントに処理を追加しています。
処理の記述にはラムダ式を使っていますね。<br>単にそれぞれ対応するアニメーションを再生するだけの簡単な処理です。
スクリプトを保存したら、これを先ほどの Strawman ゲームオブジェクトに追加します。
これで、これらのボタンが一応機能するようになったはずです。
さっそく動作を確認してみましょう。<br>Play Mode を開始します。<br>ボタンを押すと…ちゃんとアニメーションが再生されますね。
これで初めての UI Toolkit プロジェクトが完成しました。
さて次は、この UI の見た目を整えたいと思います。
今は単にボタンを並べただけなので、位置が不自然ですし、横に間延びしてしまっていますよね。<br>このデザインを調整していくことにします。
UI Toolkit のデザインには２つの大きな要素があります。<br>スタイルシートとFlexbox レイアウトです。
どちらも Web デザインの世界で使われているシステムですが、UI Toolkit でもこれらのシステムを使ってデザインを行えるようになっています。
そのため、Web の世界でデザインを経験したことのある人なら、容易に使いこなすことができるかもしれません。
Web デザインの経験が無い場合も、動画サイトやウェブを検索すれば沢山のチュートリアルを見つけることができますから、学習は比較的容易だと思います。
それではさっそく、この UI を整えていきましょうか。
まず、ボタンが横に広がっていると不恰好なので、横幅を調整したいと思います。
これらのボタンを格納するフレームを作りましょう。<br>Library から Visual Element をドラッグ＆ドロップします。
Visual Element は何も機能を持たない UI Toolkit における最も基本的なエレメントです。<br>これに３つのボタンをドラッグして格納しましょう。
そうしたら、この Visual Element の Size の Width を 150 に変更します。<br>これで幅が変化しました。
ちなみに、各エレメントにおいてデフォルト値から変更したアトリビュートは、このように縦線が出て強調表示されます。
この３点ボタンのメニューから Unset を選ぶことで、デフォルト値に戻すこともできます。
さて、このボタンは上に寄せるのではなく、真ん中に寄せましょうか。
Align の Justify Content から、この Center ボタンをクリックします。<br>これで真ん中に寄せられました。
あとは、ボタンが画面の端にくっついていると気持ち悪いので、少し余白を追加しましょうか。
今度は Spacing の中にある、Margin を 30 に変更します。<br>これで余白ができました。
次に、これらのボタンのラベルをもう少し大きくしましょう。
これらのボタンを選択して Inspector から作業を行うこともできますが、３回同じことを繰り返すのは面倒です。
それに、デザインを再調整したくなった時にも、同じことを繰り返さないといけません。
このように、同じデザイン要素が繰り返し登場する場合は、スタイルシートを使った方が便利です。
UI Builder でスタイルシートを作成するには、この StyleSheets ペインを使います。<br>"+" ボタンを押して、”Create New USS” を選択します。
ちなみに、Unity の UI Toolkit では、スタイルシートのファイル拡張子は USS になります。<br>ウェブの世界では CSS と呼ばれているものに対応する概念になりますね。
名前は Strawman.uss にしておきましょうか。
このスタイルシートに新しいスタイルを追加するには、この “Add new selector...” をクリックします。<br>すると、スタイルシートのセレクターに関するチートシートが表示されます。
ここがスタイルシートの奥深い所で、セレクターという概念を使って、特定の条件に該当するエレメントを選択してスタイルを与える、ということができます。
とりあえず今は単純に ".actionButton" というクラスを定義して使うことにしましょう。
作成した .actionButton クラスを選択して、Inspector から Text の Size を 20 に変更します。
そうしたら、この .actionButton スタイルを Hierarchy 上のボタンにドラッグ＆ドロップします。<br>これでスタイルを適用できました。
Inspector 上で、このボタンの StyleSheet を確認してみると…….actionButton がちゃんと追加されていますね。
他の２つのボタンも同様に設定します。
このようにスタイルシートを設定しておけば、後からスタイルを調整したくなった場合にも簡単に対応できます。
例えば、もっとラベルを大きくしてみましょうか。<br>あるいは、ボタンの間に隙間を持たせるために、Margin を加えてみましょうか。
こんな感じで簡単に調整が行えるようになるので、スタイルの定義はなるべくスタイルシート上で行うことをお勧めします。
さて、ここで、スタイルシートの使い方をもう少し掘り下げてみたいと思います。
というのも、スタイルシートを使うことで、簡単なアニメーションを作ることなんかもできるんです。
ここでは、このようにカーソルがボタンの上に来た時に、少し膨らむアニメーションが発生するようにしてみたいと思います。<br>いわゆるマウス・ホバーですね。
このようなホバー状態は、スタイルシートにおいて ":hover"というセレクタを使うことで設定できます。
そこで、".actionButton:hover" というようなエントリを作成します。<br>そしてこの中で Transform の Scale を 1.2 に変更してみましょう。
この挙動をテストするには、Play Mode に入るまでもなく、UI Builder の Preview 機能で十分でしょう。
Viewport ペインにある Preview ボタンを押して、マウスカーソルをボタンを上に移動すると……こんな感じでちょっと膨らむようになりました。
あとは、これが一瞬で膨らむのではなく、ちょっと時間をかけて滑らかにアニメーションするようにしたいですね。<br>これは Transition Animation という機能を使うことで実現できます。
Property から scale を選択して、0.2 秒かけてアニメーションさせましょうか。
また、ホバー状態から元に戻るときにもアニメーションさせたいので、こちらの .actionButton スタイルの方にも同じ設定を行います。<br>Transform の scale を選択して、Duration は 0.2 秒ですね。
これで実行すると……このようにカーソル・ホバーに反応してアニメーションするボタンが出来上がりました。<br>これで最初のプロジェクト Strawman は完成です。
