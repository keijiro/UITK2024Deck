さて、Strawman プロジェクトを通して UI Toolkit の基本的な使い方について解説してきました。
次に UI Toolkit の高度な機能をひとつ紹介したいと思います。<br>それがデータバインディングです。
データバインディングというのは、C# スクリプト上に存在しているデータと、UI 上の表示を、自動的に同期させるという仕組みです。
この仕組みを使うことで、UI の表示に関わるコードを減らすことができます。
まあこんな風に言葉で言ってもなかなか実感にならないと思うので、サンプルプロジェクトの中で実際にデータバインディングを使ってみて、その便利さを体験してみることにしましょう。
これはデータバインディングを解説するために作った簡単なサンプルプロジェクトで、架空のゲームのキャラクターリストを実装したものです。
40 人分のデータが用意されており、スクロールして閲覧できます。
これらのキャラクターのデータは、この Profile という ScriptableObject に定義されています。
displayName、life、strength、portrait という４つのフィールドを持つクラスですね。
ScriptableObject を使っているので、Unity Editor 上でアセットを作成し、Inspector から値を設定することができます。
このようにして 40 人分のデータを用意しました。
これとは別に、Party と言う名前の ScriptableObject も用意しました。
これは先ほどの Profile をまとめて保持するためのクラスですね。<br>profiles という名前の配列に、これを保持します。
これも Unity Editor 上でアセットを作成し、先ほど作成した 40 人分の Profile をここに登録しました。
そして、この Party をこんな風に表示する UI を実装しようとしているわけですが、どのようにすればいいでしょうか？
C# スクリプトを使って、Profile クラスの内容を順番に UI に反映していく処理を書けばいいのかもしれませんが、まあちょっと面倒そうですよね。
この面倒そうなのを解決してくれるのが、UI Toolkit のデータバインディングです。
データバインディングは UI Document 上の仕組みの一種で、エレメントのアトリビュートと、C# スクリプト上のデータを、自動的に同期させることができます。
この画像を変更したり、ラベルを変更したり、数値を変更したり……というような処理を C# スクリプトで書く必要は無く、UI Document 側だけで処理することができるわけです。
このデータバインディングの仕組みを実際に使ってみましょう。
まず最初に、基本となる UI のデザインを行いました。
今回は、ある程度ちゃんとした見た目にしたかったので、あらかじめ Figma 上でデザイン作業を行いました。
ちょっと余談になりますが、Figma から UI Toolkit にデザインを取り込むためのサードパーティーソリューションもいくつか存在しています。
もし Figma を UI デザインに使用している場合は、これらのソリューションの導入も検討してみるといいかもしれません。
今回はサンプルとして基本パッケージだけで作れるようにしたかったので、これらのソリューションは敢えて使わずに、手作業で UI Builder 上に再構築しました。
さて、それでは次に、これらのエレメントをデータと同期させるバインディングを構築していきましょう。
まずは、トップに存在するエレメントで、Data Source の設定を行います。
テストとして、ここでは Character00 というデータをソースに設定しましょう。
これ以降、この Character00 からデータを取り出して同期していくことになります。
まずは名前からいきましょうかね。<br>この display-name というラベルが名前の表示を行っています。
この Text アトリビュートの３点メニューから "Add Binding..." を選択します。
するとこのようにバインディングを編集するためのダイアログが開きます。
Data Source Path を選択するとバインド先のプロパティを選択するためのドロップダウンが開きます。<br>この中から displayName を選択しましょう。
するとこのようにデータソースの内容がテキストに反映されます。
同じ様に、この Life や Strength のラベルもバインディングを設定していきましょう。
Life のラベルには life プロパティをバインドします。
プログラマーの方なら、int 型のフィールドを Text にバインディングできるのか、不安になるかもしれませんが、標準型であれば自動的に変換されます。
ちなみに、カスタムコンバーターを用意すれば特殊なフォーマットで変換することも可能です。<br>例えば３桁毎にカンマを付ける、とかですね。
この portrait エレメントにはテクスチャをバインディングしましょう。
ちなみに、UI Toolkit で画像を描画する最も簡単な方法は、Visual Element の Background にテクスチャを設定することです。
そこで、Background の Image に portrait をバインドします。
これでバインディングの構築は完了しました。<br>データソースを変更して正しく機能していることを確認します。<br>大丈夫そうですね。
確認が完了したら、次の作業のためにデータソースを外しておきましょう。
さて、これで一人分のプロファイルを表示する UI が完成しました。<br>最後にこれをリスト表示してみたいと思います。
リスト用の UI Document を新規作成します。
ListView を配置して、名前を profile-list にします。
そして、この ListView に並べるアイテムのテンプレートを Item Template アトリビュートに設定します。
つまり、先ほど作成したプロファイル用の UI Document をここに入れるわけですね。
今回は自動的にリストを構築して欲しいので、Binding Source Selection Mode は "Auto Assign" にしましょう。
あとは、アイテムの高さを Fixed Item Height に設定する必要があります。
先ほど作成したプロファイル用 UI Document の高さは 160 だったので、ここには 160 を入れます。
こうして作成した ListView 用の UI Document を、最初のサンプルと同じように、UI Document コンポーネントを使って表示します。
最後に、この ListView にデータを与えるためのスクリプトを用意しましょう。<br>内容はこんな感じです。
Party の中にある profiles という配列を ListView の itemsSource に代入しているだけですね。<br>これだけで OK です。
さっそく実行してみましょう。<br>このようにプロファイルのリストが無事表示されました。
ここから更にスタイルシートを少し調整して、見た目を整えたものが、これになります。
さて、このサンプルでは、UI エレメントを更新するためのスクリプトは一切書いていませんし、ListView にプロファイルを並べるための処理なども書いていません。
プログラム的には、データのソースはこれだよ、と指定してあげているだけです。
データがどのように画面上に表示されるのか、という部分に関して、C# スクリプトが極力関与せずに済むようになっています。
このようにデータバインディングはとても便利な仕組みですので、UI Toolkit を導入した際には、ぜひ使ってみてください。
